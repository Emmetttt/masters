import numpy as np
from scipy.integrate import quad

c = 2.99 * (10**5)
Omega_M = 0.2795
Omega_DE =0.7205 

##MATLAB
##print('SGCred = ', [x for x in SGCred], '\nSGCdist = ', [x for x in SGCdist], '\nSGCdisterror = ', [x for x in SGCdisterror], '\nSGCweight = SGCdisterror.^[-2]')
def taylorHubble(x,a):
    return ((3*10**5)/a)*(x + (0.5*(1 + 0.7205 - (0.2795/2)))*x**2)

def latexTable(x):
    degtorad = 0.0174533
    length = len(x[0])
    print(r'\begin{table}[h!]'+'\n\centering\n'+r'\begin{tabular}{ c c c c c c }'+'\n\hline name & $z$ & $d_L$ & $\delta d_L$ &'+r' \alpha' + ' (\degree) & \delta (\degree)\\\\ \n\hline\\\\')
    for z in x:
        print(z[5], ' & ', z[0], ' & ', round(z[1]), ' & ', round(z[2]), ' & ', round(z[3]/degtorad,2), ' & ', round(z[4]/degtorad,2), '\\\\')
    print('\end{tabular}\n\caption{}\n\end{table}')
    return

def THubble(z,d):
    return (c/d) * (z+0.5*(1+Omega_DE-(Omega_M/2))*z**2)

def dTHubble(z, d, dd):
    return dd/d * THubble(z,d)

def AvgHubble(H):
    return sum(H)/len(H)

def dAvgHubble(dH):
    i=0
    summation = 0
    while i < len(dH):
        summation = summation + dH[i]**2
        i+=1
    return (1/len(dH))*np.sqrt(summation)

def D(x):
    ##Convert from distance modulus to Mpc using fun.D(x)
    return 10**(0.2*(x+5)-6)

def dmod(x):
    ##Convert from Mpc to distance modulus
	return 5 * np.log10(x) + 25

def errorD(m, dm):
    ##Error when converting distance modulus to Mpc
    return 10 * (dm/m) * (10**(0.2*(m + 5))) * 10**(-6)

def H(z, d):
    c = 3*(10**8) #ms^-1
    v = (1/1000) * c * z #kms^-1
    H = v / ((10**-6)*D(d))
    return H

def HMpc(z, d):
    c = 3*(10**8) #ms^-1
    v = (1/1000) * c * z #kms^-1
    H = v / d
    return H

def dHMpc(z, d, dd):
    ##dd is error on d
    H = HMpc(z,d)
    return H*dd/d


def Hz(z): ##Correct!
    ##Calculate H(z) using friedmann equation
    ohmDE = 0.6964
    ohmM = 1 - ohmDE
    omega = -1
    H_0 = 68.14
    return np.sqrt((H_0**2) * ((ohmM * ((1+z)**3)) + (ohmDE * ((1+z)**(3*(1+omega))))))

def expectedZ(d): #H0 = 70 kms^-1 Mpc^-1
    return (70/(3*(10**5)))*d

def HubbleIntegrate(z):
    ##Calculates the distance modulus to an object at z redshift. Assesses the integral
    ##between 0 and z
    ##To find the value in MPc, use fun.D(fun.HubbleIntegrate(0.2))
    def integrand(z, m, de):
        return 1/np.sqrt((m*(1+z)**3)+de)
    
    m=0.2795
    de=0.7205
    H0 = 69.79
    a = 3*10**5/H0
    I = quad(integrand, 0, z, args=(m,de))
    d = I[0]*a*(1+z)
    return (dmod(d))

def HubbleIntegrateVarH(z, H):
    ##Calculates the distance modulus to an object at z redshift. Assesses the integral
    ##between 0 and z
    ##To find the value in MPc, use fun.D(fun.HubbleIntegrate(0.2))
    def integrand(z, m, de):
        return 1/np.sqrt((m*(1+z)**3)+de)
    
    m=0.2795
    de=0.7205
    H0 = H
    a = 3*10**5/H0
    I = quad(integrand, 0, z, args=(m,de))
    d = I[0]*a*(1+z)
    return (dmod(d))

def HubbleLCDM(z, dL):
    ##Calculates the distance modulus to an object at z redshift. Assesses the integral
    ##between 0 and z
    ##To find the value in MPc, use fun.D(fun.HubbleIntegrate(0.2))
    def integrand(z, m, de):
        return 1/np.sqrt((m*(1+z)**3)+de)
    
    m=0.2795
    de=0.7205
    a = 3*10**5/dL
    I = quad(integrand, 0, z, args=(m,de))
    d = I[0]*a*(1+z)
    return d

def dHubbleLCDM(z, dL, ddL):
    ##Calculates the distance modulus to an object at z redshift. Assesses the integral
    ##between 0 and z
    ##To find the value in MPc, use fun.D(fun.HubbleIntegrate(0.2))
    def integrand(z, m, de):
        return 1/np.sqrt((m*(1+z)**3)+de)
    
    m=0.2795
    de=0.7205
    a = 3*10**5 * (ddL/dL)
    I = quad(integrand, 0, z, args=(m,de))
    k = I[0]*a*(1+z)
    H0 = (3*10**5 * (1+z))*I[0]/dL
    return H0*(ddL/dL)

def residual(data, dataerr, redshift, h, m, de):
    def integrand(z, m, de): ##Integral in luminosity distance equation
        return 1/np.sqrt((m*(1+z)**3)+de)

    resid = 0
    for i in range(len(data)):    
        integral = quad(integrand, 0, redshift[i], args=(m,de))
        d = (c*(1+redshift[i]))/h * integral[0]
        model = dmod(d)
        resid = resid + (data[i]-model)**2/dataerr[i]**2 ##Sum of each residual

    return resid

def WLSF(Y, x, dx):
    ##fun.c/fun.WLSF for the best H
    ##Y = redshift, x = luminosity distance
    LSF = sum((np.array(Y)*np.array(x))/np.array(dx)**2)/sum(np.array(Y)**2/np.array(dx)**2)
    return (3*10**5)/LSF

def expectedD(z): ##http://www.hep.shef.ac.uk/cartwright/phy323/DistancesModerateRedshift.pdf
    ##Calculate the expected distance modulus seen in the DM v redshift graph
	m = 0.27
	de = 0.73
	q = (0.5*m) - de
	H0 = 67
	return 24.77+(5*np.log10(((c*z)/H0)*(1+(0.5 * (1-q)*z)))) ##5logd + 5

def stdev(x, xbar):
    summation=0
    i=0
    while i < len(x):
        summation = summation + (x[i]  - xbar)**2
        i+=1
    return np.sqrt(summation/(len(x)-1))

#def expectedD(z):
#    h = 0.70
#    omega = -1
#    q = 0.1*(1 + (3*omega))   ###SHOULD BE 0.5
#    return 42.3856 - (5 * np.log10(h)) + (5 * np.log10(z)) + (5 * np.log10(1 + (0.5*z*(1-q))))
    ##https://arxiv.org/ftp/arxiv/papers/1507/1507.02734.pdf

def v(z):
    return (1 - ((1+z)**2))/((1+z)**2 +1) * (-3 * 10**5)

def cumfreq(sample):
    return np.linspace(1, len(sample), len(sample))/len(sample)

def KStest(sample1, sample2):
    ##Performs KS test to find the largest differences between two normalised samples
    ## [0] and [2] returns the normalised samples for sample1 and sample2
    ## [1] and [3] returns the cumfreq for sample1 and sample2
    ## [4] returns the largest difference
    sample1.sort() ##Sort from lowest to highest
    sample2.sort()
    #sample1 = sample1/sum(sample1) ##Normalise the samples
    #sample2 = sample2/sum(sample2)
    s1_cumfreq = np.linspace(1, len(sample1), len(sample1))/len(sample1) ##Create a cumulative frequency from 0 to 1 in intervals for 
    s2_cumfreq = np.linspace(1, len(sample2), len(sample2))/len(sample2) ##each sample step
    i = 0
    k = 0
    largest_diff = 0
    while i < len(s1_cumfreq):
        k = 0
        closest = 100
        closestk = 0
        while k < len(s2_cumfreq):
            if np.abs(s1_cumfreq[i] - s2_cumfreq[k]) < closest: ##Finds the closest neighbour for each cumfreq
                closest = np.abs(s1_cumfreq[i] - s2_cumfreq[k]) ##Records the difference
                closestk = k
            k+=1
        if np.abs(sample1[i] - sample2[closestk]) > largest_diff: ##Finds the abs difference between the two samples
            largest_diff = np.abs(sample1[i] - sample2[closestk])
        i+=1
    return sample1, s1_cumfreq, sample2, s2_cumfreq, largest_diff


def gradient(x,y):
    dy = max(y) - min(y)
    dx = max(x) - min(x)
    return dy/dx

def LOBF(x,y):
    i = 0
    top = 0
    bottom = 0
    while i < len(x):
        top = top + (x[i] * y[i])
        i+=1
    j = 0
    while j < len(x):
        bottom = bottom + (x[j] * x[j])
        j+=1
    return top/bottom

def within(userR, R, dR, maxcoord):
	if R > 0:
		if userR > (R - dR) and userR < (R + dR): ##Inputted is within the range
			return True
		else:
			return False
	else:
		R + (maxcoord*2)
		if userR > (R - dR) and userR < (R + dR): ##Inputted is within the range
			return True
		else:
			return False



'''
	elif (R - dR) < -maxcoord  and (R + dR) < maxcoord: ## If the lower band goes below -180, add 360
		if userR > (R - dR + (maxcoord*2)) and userR < (R + dR + (maxcoord*2)):
			return True
		else:
			return False
	elif (R - dR) > -maxcoord  and (R + dR) > maxcoord: ## If the upper band goes above 180, minus 360
		if userR > (R - dR + (maxcoord*2)) and userR < (R + dR - (maxcoord*2)):
			return True
		else:
			return False
	elif (R - dR) < -maxcoord  and (R + dR) > maxcoord: ## If both are out of range, transform both
		if userR > (R - dR + (maxcoord*2)) and userR < (R + dR - (maxcoord*2)):
			return True
		else:
			return False
	else:
		return False
'''

def ChiSq(z, d, H0, err):
    i = 0
    c = 3*10**5
    summation = 0
    while i < len(z):
        Exp = z[i]/d[i] * c
        summation = summation + (((H0 - Exp)**2/err[i]))
        i+=1
    return summation

def weightmean(x, err, y):
    xbar = 0
    numx = 0
    denomx = 0
    i = 0
    error = 0
    while i < len(x):
        sigma = err[i]**(-2)
        numx = numx + (x[i] * sigma)
        denomx = denomx + sigma
        error = error + (sigma)
        i+=1
    xbar = numx/denomx

    ybar = 0
    i = 0
    numy = 0
    denomy = 0
    while i < len(x):
        sigma = err[i]**(-2)
        numy = numy + (y[i] * sigma)
        denomy = denomy + sigma
        i+=1
    ybar = numy/denomy
    j = 0
    return xbar, error, ybar


def polar_dist_comp(a1, a2, d1, d2, z1, z2): ##http://math.stackexchange.com/questions/833002/distance-between-two-points-in-spherical-coordinates
    ##RA is theta
    ##Phi = 90 deg - dec
    ##http://www.shodor.org/cserd/Resources/Applications/AstronomicalCoordinates/
    degtorad = 0.0174533
    a1 = a1*degtorad
    a2 = a2*degtorad
    d1 = d1*degtorad
    d2 = d2*degtorad
    d1 = (90*degtorad) - d1
    d2 = (90*degtorad) - d2
    #z1 = D(HubbleIntegrate(z1))
    #z2 = D(HubbleIntegrate(z2))
    return np.sqrt(z1**2 + z2**2 - (2*z1*z2*((np.sin(a1)*np.sin(a2)*np.cos(d1-d2)) + np.cos(a1)*np.cos(a2))))


######DATA#######   
##Data
data = [eval(x) for x in open("C:\Python34\masters\graphs\Reduced_Data_update.txt", "r").read().split("\n")]
data = data[1:]

#[0] - Sne Name             [4] - Color         [8] - ?
#[1] - Redshift             [5] - Dist Modulus  [9] - Position
#[2] - B-Band Mag           [6] - Sample        [10] - Sne Type (not correct yet)
#[3] - Stretch              [7] - Fails

redshifts = [x[1] for x in data]
redshifts = [float(x) for x in redshifts]
distmod = [x[5] for x in data]
dist = [x[0] for x in distmod]
disterror = [x[1] for x in distmod]
disterrMpc = [x[1] for x in distmod]
name = [x[0] for x in data]

i=0
while i < len(disterror):
    disterrMpc[i] = errorD(dist[i], disterrMpc[i])
    i+=1

distMpc = [D(x) for x in dist]  ##Convert from distance modulus to Mpc
position = [x[9] for x in data]
RA = [x[0] for x in position]
RA = [x*15 for x in RA] ##Convert to degrees
dec = [x[1] for x in position]



#RA = [0], dec = [1], dist = [2], disterr = [3], redshifts = [4]
lowZ = []
midZ = []
highZ = []

k = 0

while k < len(dec):
        if redshifts[k] < 0.1:
                lowZ.append([RA[k], dec[k], dist[k], disterror[k], redshifts[k], distMpc[k]])
        elif redshifts[k] < 0.5 and redshifts[k] > 0.1:
                midZ.append([RA[k], dec[k], dist[k], disterror[k], redshifts[k], distMpc[k]])
        elif redshifts[k] > 0.5:
                highZ.append([RA[k], dec[k], dist[k], disterror[k], redshifts[k], distMpc[k]])
        k+=1


extract = lambda x,y: [b[y] for b in x] ## extract(highZ, 1) for highZ declinations



###Superclusters
#['Supercluster', 'RA', 'Dec', 'z', 'Rmax (Mpc)', 'L_X', 'Multiplicity', 'f=50', 'ID']
datasc = [eval(x) for x in open("C:\Python34\masters\sc_reduced.txt", "r").read().split("\n")]
sc = datasc[1:]

scName = [x[0] for x in sc]
scRA = [x[1] for x in sc]
scdec = [x[2] for x in sc]
scz = [x[3] for x in sc]
R = [x[4] for x in sc]


###############
###############
##Northern SC##
nscdata = open("C:\Python34\masters\\northern_sc.csv", "r").read().split('\n') ##lines separated by \n

i=1
while i < len(nscdata):
    x = nscdata[i]
    x = x[:-9].split(',')
    nscdata[i] = x
    i+=1

del nscdata[-1]
del nscdata[0]

north_sc_name = [x[0] for x in nscdata]
north_sc_RA = [x[1] for x in nscdata]
north_sc_dec = [x[2] for x in nscdata]
north_sc_z = [x[3] for x in nscdata]


#################
##South Cluster##
clustersouth = [eval(x) for x in open("C:\Python34\masters\\data\\cluster\\cluster_south_reduced.txt", "r").read().split('\n')] ##lines separated by \n

clustersouthname = [x[0] for x in clustersouth]
clustersouthRA = [x[1] for x in clustersouth]
clustersouthdec = [x[2] for x in clustersouth]
clustersouthz = [x[3] for x in clustersouth]


##################
##Planck Cluster##
planckdata = open("C:\Python34\masters\graphs\cluster_data.txt", "r").read().split("\n")
planckdata = planckdata[:-1]
planckdata = [eval(x) for x in planckdata]

clustername = [x[0] for x in planckdata]
clusterz = [x[1] for x in planckdata]
clusterRA = [x[2] for x in planckdata]
clusterdec = [x[3] for x in planckdata]


########################
##Newer Planck Cluster##
newplanckdata = open("C:\Python34\masters\graphs\cluster_data2.txt", "r").read().split("\n")
newplanckdata = newplanckdata[:-1]
newplanckdata = [eval(x) for x in newplanckdata]

newclustername = [x[0] for x in newplanckdata]
newclusterz = [x[1] for x in newplanckdata]
newclusterRA = [x[2] for x in newplanckdata]
newclusterdec = [x[3] for x in newplanckdata]


#################
##Abel clusters##
abel = [eval(x) for x in open("C:\\Python34\\masters\\data\\abel\\abel_reduced.txt", "r").read().split("\n")]

abelname = [x[0] for x in abel]
abelz = [x[1] for x in abel]
abelRA = [x[2]*15 for x in abel]
abeldec = [x[3] for x in abel]


#####################
##Abel Supercluster##
##http://cdsarc.u-strasbg.fr/viz-bin/Cat?cat=J%2FA%2BAS%2F113%2F451&target=readme&
##http://cdsarc.u-strasbg.fr/vizier/ftp/cats/J/A+AS/113/451/table2
##http://cdsads.u-strasbg.fr/cgi-bin/nph-iarticle_query?1995A%26AS..113..451K&amp;data_type=PDF_HIGH&amp;whole_paper=YES&amp;type=PRINTER&amp;filetype=.pdf
abelsc = [eval(x) for x in open("C:\\Python34\\masters\\data\\Abel_supercluster\\abel_sc_reduced.txt", "r").read().split("\n")]

abelscradii = [float(x[0]) for x in abelsc]
abelscoverdensity = [float(x[1]) for x in abelsc]
abelscz = [float(x[2]) for x in abelsc]
abelscRA = [float(x[3]) for x in abelsc]
abelscdec = [float(x[4]) for x in abelsc]


##Polar Distances
def deltaH(SNered, SNedist):
    return (D(HubbleIntegrate(float(SNered))) - (float(SNedist)))  / D(HubbleIntegrate(float(SNered)))

distance_nearest_cluster_sc = [57.396464353956027, 18.408677878089026, 54.096694826676313, 12.295156492969467, 113.64498558344786, 66.32200918055382, 16.187563113183799, 31.760755976099102, 50.855609807602335, 68.066396543130736, 45.751210857590515, 54.09929225800699, 32.004615616401367, 31.840896130372059, 10.337107939489002, 45.374174101265815, 32.825073856083549, 9.3494549139953413, 4.4804588842710933, 25.539604522023904, 33.388265182346878, 10.020605069214007, 24.795975452607625, 96.415224575925848, 8.0575732452042104, 10.376236339530106, 42.804834248440905, 29.614894981978093, 6.4968045015414315, 52.842824544564841, 16.332992068807759, 11.682476345164188, 45.304949863883053, 34.526642755986913, 44.258363593352769, 5.8599295848377846, 41.76789066988372, 61.996373374902561, 29.287570374818312, 31.678612514773615, 10.342163870047782, 14.51288538878053, 5.0715457024077599, 16.713698821057097, 42.608169770385409, 18.663083972801658, 21.402012377204915, 4.1859420594993093, 17.516025424763477, 26.485580589709631, 46.295952159566291, 71.933249276260412, 38.328964505489019, 69.705928667373001, 28.436246406731026, 10.080660446321479, 27.105324824328562, 19.752399349449004, 29.94882607112897, 56.203654220000139, 9.7903282069182094, 43.547640911025105, 25.60300610190664, 39.247068931592544, 38.238361929466315, 42.789783043454285, 26.791084021641595, 15.635744730692263, 43.191883065969435, 33.477805054076271, 12.576190607992617, 38.326466922648741, 42.339855657593276, 70.340985449215509, 25.03802305814715, 26.337366936718059, 21.759517049167563, 6.5787764372664173, 33.079702469887458, 61.506107788766684, 20.884634295251232, 4.1973873666453514, 27.894507649943016, 30.688780371612939, 53.954188596377804, 11.553868048976991, 22.791824265717466, 9.8821714990613216, 10.1552308378651, 27.885644790643344, 5.4450610572051525, 15.707868563576978, 29.849738348535244, 14.645884416309165, 27.988059622533669, 49.407763143182514, 36.799376284823232, 9.2275457760153348, 31.486788452173574, 18.398674451229049, 31.117970523232149, 27.223793932804586, 45.159025998030238, 11.478668844555669, 9.9418206353002709, 26.577728987254499, 20.540992705817771, 11.774170600294164, 43.1256343677572, 23.82658222257129, 45.798831889639786, 11.488389174465679, 30.757877252575575, 41.740007981806819, 17.454226837341807, 16.575121614765866, 18.690514207955406, 21.527335277644067, 41.118909726066548, 27.434459989725656, 46.36899348348939, 23.000084405330256, 20.003172935205455, 45.866099681675237, 50.827325768278783, 52.5123095889426, 28.439004751530128, 56.210446181796726, 18.825161623400032, 35.166980087183219, 28.331727190643772, 5.9234300919139358, 37.355335945982034, 29.297537678197614, 48.200608891297314, 18.508782136962228, 10.598043311248233, 65.426067434584411, 10.690911461322026, 6.929729151364719, 44.6815442949679, 28.989006955919152, 7.888016599505157, 11.953849213887409, 42.157217992450718, 29.465145607749168, 27.317091499072557, 16.787187175110056, 22.701933284654235, 9.8424348714113368, 10.803372761868578, 25.259657048449579, 16.921763766571271, 52.011790904474111, 18.652707959335693, 22.307221426454664, 31.798517347360743, 7.726034099545509, 1.3402347913535961, 27.595481798904288, 36.171329853526537, 14.579642232755067, 63.430001777310181, 25.848626419498292, 32.621681851959735, 57.627357471837804, 15.935522364081717, 14.948713903451141, 14.5772018863189, 33.723057861313585, 83.587276901670378, 51.427939444318291, 118.98102699865268, 55.335643481413676, 9.7758164568045256, 104.12548876353699, 104.5851355289077, 182.95335311226745, 37.664469100465183, 43.430454907729768, 281.61888990389389, 55.458534320292195, 57.949780539604234, 281.06453196234133, 198.09669515875203, 26.783795486522745, 98.825009208132826, 121.77283109661008, 53.671659522314002, 60.304948135039119, 121.77708477605933, 203.45209777488631, 217.52317709166806, 120.58265216026993, 81.864809190444902, 61.531110429602471, 156.12297422643431, 51.970243545197164, 32.631155075003626, 15.733404615478968, 71.754032752240647, 70.838767912297612, 295.85211138902713, 116.78982142136958, 45.755756418060301, 100.63551348650107, 92.69614995884757, 70.913806911000052, 62.109533863565467, 43.743866911611065, 55.315148814587793, 63.563452647110942, 170.73360692550625, 171.10369254006429, 68.862572814002704, 112.33336623974651, 124.83913650324371, 239.04493933156647, 174.92085212751971, 114.59182788198606, 64.190791650882773, 28.139676725693501, 208.78939141153026, 14.938730954422923, 196.75922406967831, 96.34315002806288, 252.17358344875302, 21.135963162147782, 127.67682355609489, 141.65724263962761, 280.5830703596863, 101.15324249755125, 32.81550541050995, 18.859227502569254, 31.331121991395602, 94.473423660866914, 129.87108321267303, 32.582740050278503, 129.29399915931145, 59.042192537511802, 368.83459088937593, 171.76260289024799, 40.306249904822387, 213.46498346630003, 189.81869792671307, 114.34428155487009, 77.285569600734831, 273.42861596958102, 56.333424568523505, 150.85639733523573, 76.651708162030388, 231.68404151292421, 22.599927175500486, 69.145426289906879, 114.53261632532244, 96.028640388097983, 41.782274566349543, 153.81530662523087, 129.01630724200885, 56.151519080676373, 81.208996263564771, 100.42347622454352, 49.457967726056339, 115.98954112274166, 109.41366887236923, 94.712056701997582, 52.885860800687134, 41.352589718324765, 26.295325189565975, 103.51103956792514, 163.61158447589128, 59.712407257495279, 18.162937402681905, 56.870139075692862, 224.73594425970447, 25.486776206174689, 48.132046676385677, 306.66094238229562, 122.16077682988758, 206.67528532383594, 287.86524600471535, 147.52818437801719, 43.193321419362732, 135.82523981863235, 129.36618008805686, 148.59552625003508, 30.853682259737095, 63.475011646338558, 112.32565107934744, 258.67382295647917, 230.85887822918889, 161.63014503140596, 41.793935158943555, 440.9742348796691, 403.80676145702478, 149.59617768200272, 37.575593806857157, 279.91868050220802, 180.24349952540749, 54.291902475015334, 493.29217260028048, 349.69848053439461, 2327.5761921049707, 196.70839553901209, 1927.1233942532319, 353.54815560564697, 510.9454747921182, 253.1530298273945, 873.41459626691471, 165.69646198869106, 782.55723004771778, 269.28449512600616, 142.45966310960731, 325.23955922412398, 150.80003489454265, 696.55215367333869, 832.90342772877329, 153.96575294714418, 109.67944363697303, 1384.9663615637298, 339.73707875572342, 312.25611537371083, 630.16784009034893, 642.10590702073409, 419.58785316593912, 501.01363357639173, 454.98854694012607, 401.30615741826972, 361.86568087985097, 446.35694920998083, 874.304921214773, 228.45073168747385, 621.63934492282283, 119.89510302582387, 226.73248530417084, 163.69208586994029, 269.00518430752999, 201.62283944191157, 225.40991975701905, 1973.3048509716825, 2147.124606465502, 199.75974780007218, 2788.1549444410534, 1894.4876725964966, 1497.6155044976565, 1178.0773331596181, 243.97749147136304, 832.09188858683137, 173.48209657336113, 219.10434685539292, 1654.9283077495843, 1580.2931604017938, 1721.8988048034983, 1838.1426287151749, 2080.4111501442021, 1560.3847562501523, 51.569635953429973, 37.555364073674305, 41.769009396494717, 181.87912540569701, 101.24589754542994, 727.87921169171796, 1543.3210620939931, 993.66940383200654, 307.59737376909442, 681.49471874587528, 248.31692642920876, 215.04052263942611, 99.6092219387683, 1434.1533255670056, 83.136855720940773, 1847.3981434019988, 36.162387483601591, 695.48171029453681, 2366.1243843952893, 1512.6543165910598, 308.11938696659382, 367.90221752841876, 702.8660000681524, 67.862824375909341, 1136.8268821781282, 675.77875689551047, 653.17506491806114, 606.12373917025513, 2319.9567840028299, 678.24482523039376, 1078.9726993104678, 556.69421066382779, 2560.6218765162139, 1476.8861501204462, 160.6539115553897, 1682.4155779140851, 519.83395447063117, 661.67369732488248, 909.19072818623874, 1948.2251617159704, 215.02067320268171, 989.47859572424966, 1923.0877343260602, 958.43153274601809, 2151.0903122175419, 592.52302744535245, 183.60079080315472, 1736.9007663698947, 602.37626366545578, 435.60650343996349, 1578.8047902039302, 138.50189595131658, 667.2798158658311, 294.48666639370782, 117.94645349582034, 182.8987897845233, 103.29974441118871, 135.48223828273282, 1017.6217510627459, 114.22851175590483, 1521.7383774585894, 1164.8607800249281, 1269.9946366530269, 413.67633596041202, 446.48504535744871, 210.46710264977943, 371.64397370378896, 240.75947189691067, 601.51467405222411, 981.1464211893109, 693.00117648663434, 245.57633474418679, 378.02722151185947, 309.63581672470031, 1343.4664884338795, 461.8766848684001, 2151.6249545558139, 615.14222917765392, 897.46918442443916, 2323.6450224301516, 2482.7886525701088, 1510.2767479520337, 253.39630288068034, 665.68191579633776, 180.59444419079952, 362.06251081783387, 129.00409941269695, 340.48738689817736, 699.34599141341664, 1251.1710699893608, 1014.1642335791174, 275.22324968321823, 1594.8429140966628, 1001.4932142206258, 1621.7279711958081, 215.00932957170821, 442.43755299662178, 709.98574101312863, 466.58552640536931, 198.64606657741149, 81.043765503764646, 81.057292834015882, 93.214083630903943, 813.47706701803872, 288.69982410648976, 170.81225950083848, 331.03404179128938, 606.50568989626981, 222.39742301604576, 59.92994521650504, 267.47096143872352, 331.40919799805312, 185.39285702163767, 298.91475958944898, 238.41012196454997, 316.53177189491919, 69.679389086917595, 263.3143800035341, 445.25044867177968, 91.532907943932344, 282.07389766358182, 919.7727975715286, 956.54312472715173, 1020.5954870210028, 291.90148099776985, 565.05448597673671, 511.13501943019247, 215.72773206858506, 370.25912185306072, 171.13171185608311, 906.56536265567934, 343.50364978914143, 432.38914527178895, 707.66762251978469, 260.93771566463096, 114.74701169768286, 404.46405931475664, 226.87686301727231, 160.42794079957943, 153.29033818554552, 273.3731297760097, 173.14088340444601, 220.09589657078385, 553.9161483809936, 727.32030120914624, 933.47975366208732, 397.85941745015981, 834.17630034828835, 280.15760224951322, 315.56551238998105, 115.82089175701631, 251.84402673521637, 81.530580857803528, 312.44678875679421, 57.580713321283248, 35.367380888212601, 344.0915960416807, 939.08914440209617, 333.42909137417121, 152.4075024277667, 60.509933601087262, 729.43839652233112, 88.703609722157225, 225.32200585062725, 316.41235664571798, 265.45463077154557, 255.99232077373907, 917.88756334637321, 522.14349030502012, 254.10193523850984, 58.338825373083132, 216.56787911266355, 163.62380685275463, 250.955821393854, 590.20193760298741, 556.46058595900627, 1023.8074519370399, 69.780882611382438, 81.822479610280766, 190.62661516473153, 77.059343244984987, 214.87451617307605, 527.47336254267657, 300.68752904280467, 849.17942591368831, 601.77048923405312, 2957.8250591147817, 1173.9206831087781, 499.55284615892407, 819.62373857771433, 1268.2772155602911, 1814.4709714866183, 564.11481320699932, 624.46597429137398]
dH = [0.029171034274162896, 0.023364655599272574, 0.027110877755860532, -0.10872518672191257, -0.10130778716781458, 0.12151406826283424, -0.13582760710265263, 0.010749778699861323, -0.05565291803844219, 0.057731594903483979, 0.032206709618385738, -0.053242374511937945, 0.13039717282148364, 0.028037608842114668, -0.072758260299852384, 0.075207848100141611, 0.043520349544044511, 0.094361661929495466, 0.083940653530136758, 0.017957759402643648, 0.042269402957562395, 0.061652009786956632, -0.039775647621693597, -0.016612825810253168, 0.01174402666980826, 0.00076441637731701516, 0.013584301899381821, 0.13288515203799126, 0.029899846917607387, -0.09829862050499065, 0.083087498732048709, 0.10266460412014555, 0.035523016609260209, -0.11708161892992038, -0.034782972525205021, 0.040013706989808495, -0.026484958185032503, -0.042736627970508256, -0.16032992099674068, 0.037957388165400785, -0.008767770265041424, -0.051170464825268366, 0.13245528599864448, 0.17783416870005367, -0.014983354842370905, 0.14948598959945641, 0.050899023314646068, -0.18433089129944949, -0.020783778376959099, -0.041087873031425824, -0.0071924142568234118, 0.064156864586212947, -0.059655852908612694, 0.0049258255559280198, 0.14635169560873088, -0.019421101422644301, 0.038603188938099102, 0.027682883354025072, -0.12808070172523114, -0.043782578816771604, 0.03690774306661903, 0.0026254867553297413, 0.020232521443740721, 0.01404600783257238, 0.060793079080890162, 0.027150667048992813, 0.0073098085796311002, 0.16608263040713711, 0.16424764986342388, -0.0024277644483149349, -0.021803512348753443, -0.075642345990924356, -0.031099796955368849, 0.14033767513578829, -0.037190162395673063, -0.22878129552909757, -0.093842514324668544, -0.25457771201065782, -0.052052556665577294, -0.2184432557784782, 0.009735206988314607, 0.14206336890423252, -0.033627197248849702, -0.07417406799854856, 0.021645827131255953, -0.030954320884085292, 0.072623130554132803, -0.0700399476233384, 0.0027277588446112172, -0.017965105392940654, -0.024462584515585861, -0.019456780160975667, -0.0075698024158429265, 0.062471001340256724, -0.054482985188634536, -0.044575033947699336, -0.068184543489452062, 0.031252872327200143, -0.045379901828169859, 0.01426855917335885, -0.094220123973958333, 0.027720344922111333, -0.030308098185779658, -0.24605776581274677, -0.013656021218449551, -0.055814371628625736, 0.014218269105516598, -0.14593691967190511, -0.0098245783761150337, -0.13567439299170347, -0.31457833880873692, 0.072206210017463579, -0.012322670429753014, 0.18692092872106222, -0.058939029198470903, -0.056284155403980574, -0.007324881396768272, -0.13991340002818853, -0.057795804523942416, -0.0036338171538944121, 0.069403779888971534, -0.067401709417904104, -0.075106435013107986, 0.0019051466883723224, 0.014156604885986432, -0.010641235312778176, 0.04632589284011332, 0.075854309102601741, 0.032210813427662945, -0.062789081475963321, -0.026075073604086556, -0.15209260150730022, -0.05535844914679322, 0.059456338314775134, -0.039412228292446692, 0.046196244168109038, 0.025395542387544309, 0.069346913905552629, -0.22621920358450665, 0.056219596800424571, 0.0072656047173425822, 0.13356566405507556, 0.11356634318366009, -0.029659190601479531, 0.034051790166793508, -0.064399587796553387, -0.091554904826382705, -0.017389819812026985, 0.052681318830403431, 0.11174632266313575, 0.092575377013063023, 0.052795391229535367, 0.15782956441748608, -0.029142537798169631, 0.051635287161073823, 0.062391008433437145, 0.054550861154844234, 0.034630662810000525, 0.054879055142528978, -0.032291939705765126, -0.019772626668505534, -0.077573950345107168, 0.043312270317213547, 0.040286222599884194, -0.054821898766323006, 0.041672711275746267, 0.049934433516485549, -0.0087397470216261184, 0.030831673357943411, -0.0097511347316815659, 0.0033657250028871866, -0.047886484891508638, 0.13426076925065542, -0.047220058997088518, 0.023543028148415853, 0.027764595541667922, -0.012977198512284537, -0.098434677789565203, -0.039362479233194254, 0.066669773340296709, 0.0053526446218598676, 0.080491232697820353, -0.0061384057384840339, -0.25991475603457292, 0.018665955864803654, -0.01393129626638794, 0.045611635745323897, -0.070065308697273093, 0.055719387435745893, 0.068927220706163028, -0.059040473180057909, -0.091228857744130712, 0.063481160633161393, 0.066294393560094672, 0.004946474274558476, -0.087129561448589174, -0.027691422786144431, -0.032319663515150129, -0.23122700668671348, 0.034886635248545649, -0.057361794346086604, -0.079904905942412882, -0.013632768373187876, -0.023994471345693279, 0.016192502118691929, 0.056525364198681823, 0.015661309337170016, 0.0027506567227779262, 0.044930672457003336, 0.073497999341628539, 0.052049220521522714, 0.044613281719313801, -0.13061470480745288, -0.026320622980012635, -0.077795991355012833, 0.036809835291571953, 0.0050583382793532479, 0.11380160885516497, 0.10194560912201243, 0.021215055796056856, 0.011593878120911503, 0.041955720813078738, -0.02730962446981014, 0.0086792367437689855, -0.005696531150519173, 0.031089453827856581, 0.074633881229580673, -0.046247757503206768, 0.01622675757957321, 0.046204794288714351, 0.056271285411035342, -0.033491557414598416, -0.0055858830924884655, -0.0064788365532371904, 0.014150466862214524, -0.038396439694620921, -0.19486228192952085, -0.10901811153049261, -0.002228155457824088, 0.025621906462519516, -0.012658317538170292, 0.014506341645305313, 0.052309952718921089, 0.0093810676783588811, 0.060013201940358279, -0.012814420561929326, 0.0074204514031610096, -0.14426838879780113, 0.00076308362460263666, -0.031251671654232552, 0.019712173559443498, 0.12736503375172636, -0.0047687971398079187, 0.019328115434957695, 0.075515464283691436, 0.051366424349844099, -0.014353323233907693, 0.03140235263351019, -0.065746300933574961, 0.099260991220437175, -0.090783416950039747, 0.057327998155448333, 0.094702087722514761, 0.057376781343148754, -0.0038083832037962948, -0.056337750058231981, -0.017049175423426113, -0.062456580326063223, -0.0092727051258212328, 0.014780355850789411, 0.0048162756119230097, -0.018832629589182935, -0.026732448333447272, 0.017846380409187838, -0.016463363213147269, -0.045869055215767, 0.0027663590686899863, 0.063060430830222738, 0.053857454001225172, -0.19039084302634093, -0.1446366121940969, -0.020247284222675941, 0.024366197403628168, 0.013119641025933687, 0.11900851903299133, -0.053721351547234106, -0.011089738195199317, -0.0060008950381655272, 0.01054936153649348, -0.1312041592976721, 0.024160262829500432, 0.037196227996735449, -0.093752458605242645, 0.2315795564861346, -0.19000919301647118, 0.062227543626563041, 0.0060838533277740234, -0.25114193174858529, -0.26356884885447474, -0.16012134751097598, -0.046361748981659706, -0.03523237827714687, 0.43320287623822812, -0.08511901650563132, 0.041716148545815721, -0.32653703137078371, 0.24839313562409571, 0.079524593961499621, -0.27003271762598535, -0.049085761474288676, 0.012097687672149622, 0.054636325491092111, 0.072828151955087447, -1.1451761627129777, -0.24407409013182077, -1.2958866346975129, -0.923365872425292, 0.13156248794599162, 0.19008710510055077, -0.63202165812948252, -0.33937468443866464, 0.041485006753557513, -0.12722909325982334, -0.065431626901389442, 0.061789807381986826, 0.18414680131763339, -0.01882002572641758, -0.30801725318962359, -0.19677412025910063, 0.0082817063018806019, 0.12531850716513282, -0.32113667146112673, 0.26829109675050755, -0.3840025095512436, 0.11498765198566617, -0.44064833827948779, 0.26268410079295978, -0.22056067622624434, 0.12078745833364994, -0.1830445428398077, 0.25749636905462525, -0.010283392213799397, 0.23265663798553585, -0.18830890482904244, -0.25114175193692739, -0.31949968190402828, -0.042208649852559732, -0.17636616049911916, 0.090751743165527615, 0.084893190688611134, -0.03583341378246533, 0.066816183697956999, 0.17441808757853719, -0.022238655114999343, 0.19522932190572534, -0.033790538401636656, 0.10415338461371752, -0.098677885779949695, 0.038366371622326055, -0.037386010548564275, -0.11313166070477439, 0.009850744642293352, 0.053886425184595424, 0.078123681894932365, -0.14182332527923922, -0.10833911037377156, -0.023739193066849348, -0.027263494717535659, 0.027010530984696909, -0.063891552488006806, 0.030342139603849023, -0.09238130903893256, 0.093178898270749266, 0.050135167114596056, 0.15144179602807717, -0.048689575840703582, -0.13832664745165946, 0.023089573213755529, 0.052276528381078428, -0.2030299944759226, 0.094745119518605106, -0.03817036577195243, 0.0076322122907385966, 0.068790337327522419, -0.12974075275953167, 0.015906092413486884, 0.037339577816114349, -0.013049744437320049, -0.11291877958375383, 0.075402697040044125, 0.11090034884002556, -0.099125980970613869, -0.080386163233744062, -0.21806432365626283, 0.086694406035158378, 0.17391285420104249, -0.018088542484691817, -0.027988284834909383, 0.0076116972099257102, -0.10366381010207533, -0.033318365413387063, 0.030572593288664622, -0.0095648138112119536, 0.16406899403761777, 0.085264834378595999, 0.10583265882893414, -0.21871910246380594, 0.094562600748439599, 0.0036151601653824205, -0.0048482165920332373, 0.0064992922322539151, -0.042755800450713477, -0.003170430289727176, -0.028452118692431697, -0.21197641812875326, -0.075351180994033734, -0.19788373948936097, 0.023224195291881983, -0.036477820545983322, 0.093313505019877327, 0.037060702566033027, -0.0074942407772532376, -0.037438808271195778, -0.062557005428482582, 0.008167548912485471, 0.033795463166089557, 0.0039525898816601228, 0.1022174494981429, 0.066612660507720772, -0.027994373922632525, -0.036036350496053096, 0.10992587844833457, 0.098685661627667176, 0.054296509823168949, -0.024969831571499228, -0.004283581590308649, 0.22509150365891636, 0.089394732155673562, -0.22348302600101186, -0.067880074673005136, -0.049792606283131237, -0.075782010346629777, -0.0073220026527851204, -0.057971706387870796, 0.09869693056755012, -0.08466317821032858, 0.035907030455771968, 0.063084147275060024, 0.11409957110933158, -0.18344815550791141, -0.24206566812228708, -0.012020294929949511, 0.024462988948669811, 0.0060748751450263073, -0.015199072690298509, -0.0025007594148541974, 0.026579193552363576, 0.00048796009661089632, 0.019308754625357163, -0.25013622161509269, 0.048437261861095399, -0.063585570630786459, 0.12466872304182601, -0.3723890613887324, 0.0053693193656311313, 0.058549226288892156, 0.035983728250220282, 0.021820866237010957, -0.044079020033908102, -0.00096385277492457672, -0.057959059249362642, -0.035388747109538807, -0.00094566354022520074, -0.014310764034409007, -0.1129745625623952, 0.06553368720074175, -0.019610673257267626, 0.0035728675450820563, 0.21258246130122574, 0.061290714949837628, -0.0018544632534371361, 0.083379997415770207, 0.1095808248865671, -0.13894681461381253, 0.17544482370837164, 0.153341166507802, 0.0095481347154050319, -0.10257367756836028, 0.050886825083923226, -0.010691288439128961, -0.47116658285574203, 0.045523715688857644, 0.27802446175326001, -0.021580612462987456, -0.15879840912901036, 0.092003102760149516, 0.18967675380906127, -0.14959483830888795, 0.09168475390499084, 0.044085840197517559, 0.05616575230240714, 0.12723819465368127, 0.0039064067788920935, 0.057448991363489361, -0.17096740205289587, -0.11752070489689964, 0.0066187027853740754, 0.066448133231469003, 0.083254588699648871, 0.10114939361424129, 0.011998022684757591, 0.022372841555184507, -0.24474634476992124, 0.087225009863229924, -0.11086645231548663, 0.1072715441907624, -0.17850355946501839, -0.23470509167669845, 0.12193781075362382, -0.067511009911593894, -0.57757762444380589, 0.059855268211149129, 0.13185573707545656, 0.008700050839696799, -0.13880614637511904, 0.0097602202291273196, 0.082789829517773, 0.026259544499060806, -0.11757442715618456, -0.0019456563324156205, 0.060884554484873142, 0.088872796737398951, 0.013245072464996158, -0.16972232212095617, 0.13150557531642529, 0.039431189326601182, 0.018336503635841352, 0.062723948516846928, 0.044686440926265628, -0.038914184959722278, -0.20622309022812554, 0.11347948678618065, -0.12888513689066797, 0.015675365464502464, 0.0058380275168060823, 0.10214912641943016, 0.090768003255824972, -0.017093295755164738, 0.15084649973211067, 0.17343748112843416, 0.99412616345775395, 0.052380921892542405, 0.062085360183977589, -0.0041035930058194508, -0.051609217825675589, -0.044325103954468016, -0.017093295755164738, 0.15084649973211067, 0.10214912641943016, -0.1028717998646181, 0.090768003255824972, 0.11772469514738013, -0.31104884107748221]
#[0.99412616345775395, 0.052380921892542405, 0.062085360183977589, -0.0041035930058194508, -0.051609217825675589, -0.044325103954468016, -0.017093295755164738, 0.15084649973211067, 0.10214912641943016, -0.1028717998646181, 0.090768003255824972, 0.11772469514738013, -0.31104884107748221]


scDist = eval(open("C:\Python34\masters\graphs\supercluster\superclusterDistances.txt", "r").read())
clusterDist = eval(open("C:\Python34\masters\graphs\supercluster\clusterDistances.txt", "r").read())
bothDist = eval(open("C:\Python34\masters\graphs\supercluster\\bothDistances.txt", "r").read())






#####################
##SDSS SUPERCLUSTER##
##redshift, RA, dec, name, radius
SCSS_SC = [eval(x) for x in open("C:\\Python34\\masters\\data\\SDSS Supercluster\\SDSS_DR11\\SDSS_sc_reduced.txt", "r").read().split("\n")]

SDSSname = [x[3] for x in SCSS_SC]
SDSSz = [float(x[0]) for x in SCSS_SC]
SDSSRA = [float(x[1]) for x in SCSS_SC]
SDSSdec = [float(x[2]) for x in SCSS_SC]
SDSSradius = [float(x[4]) for x in SCSS_SC]


#####################
##SDSS MINIMAL VOID##
##redshift, RA, dec, name, radius
SCSS_minvoid = [eval(x) for x in open("C:\\Python34\\masters\\data\\SDSS Supercluster\\SDSS_DR11\\SDSS_minvoid_reduced.txt", "r").read().split("\n")]

minvoidname = [x[3] for x in SCSS_minvoid]
minvoidz = [float(x[0]) for x in SCSS_minvoid]
minvoidRA = [float(x[1]) for x in SCSS_minvoid]
minvoiddec = [float(x[2]) for x in SCSS_minvoid]
minvoidradius = [float(x[4]) for x in SCSS_minvoid]



#####################
##SDSS ISO VOID##
##redshift, RA, dec, name, radius
SCSS_isovoid = [eval(x) for x in open("C:\\Python34\\masters\\data\\SDSS Supercluster\\SDSS_DR11\\SDSS_isovoid_reduced.txt", "r").read().split("\n")]

isovoidname = [x[3] for x in SCSS_isovoid]
isovoidz = [float(x[0]) for x in SCSS_isovoid]
isovoidRA = [float(x[1]) for x in SCSS_isovoid]
isovoiddec = [float(x[2]) for x in SCSS_isovoid]
isovoidradius = [float(x[4]) for x in SCSS_isovoid]


#################
##Abel clusters##
SDSS_cluster = [eval(x) for x in open("C:\\Python34\\masters\\data\\SDSS cluster\\SDSS_cluster_reduced.txt", "r").read().split("\n")]

SDSScname = [x[0] for x in SDSS_cluster]
SDSScz = [x[3] for x in SDSS_cluster]
SDSScRA = [x[1] for x in SDSS_cluster]
SDSScdec = [x[2] for x in SDSS_cluster]
SDSScRadii = [x[4] for x in SDSS_cluster]
